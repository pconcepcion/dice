// Package dice provides tools to develop rpg games package rpg
package dice

import (
	"fmt"
	"testing"
)

// Helper Functions

// equalTokenSlices compares two token slices and returns true if both are have the same content
func assertEqualTokenSlices(a, b []Token) bool {
	if len(a) != len(b) {
		return false
	}
	// TODO: extracth this to a compare token arrays function
	for i, tok := range a {
		if tok != b[i] {
			return false
		}
	}
	return true
}

// Test that the lexer sends the propper tokens
func TestLexer(t *testing.T) {
	var lexerTestStrings = []struct {
		s   string
		out []Token
	}{
		// Constants
		{"1", []Token{{tokenNumber, "1"}, {tokenEOF, ""}}},
		{"10", []Token{{tokenNumber, "10"}, {tokenEOF, ""}}},
		{"100", []Token{{tokenNumber, "100"}, {tokenEOF, ""}}},
		{"1000", []Token{{tokenNumber, "1000"}, {tokenEOF, ""}}},
		{"10000", []Token{{tokenNumber, "10000"}, {tokenEOF, ""}}},
		{"4321", []Token{{tokenNumber, "4321"}, {tokenEOF, ""}}},
		// Basic dices
		{"d2", []Token{{tokenDice, "d"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"d3", []Token{{tokenDice, "d"}, {tokenNumber, "3"}, {tokenEOF, ""}}},
		{"d4", []Token{{tokenDice, "d"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"d6", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenEOF, ""}}},
		{"d8", []Token{{tokenDice, "d"}, {tokenNumber, "8"}, {tokenEOF, ""}}},
		{"d10", []Token{{tokenDice, "d"}, {tokenNumber, "10"}, {tokenEOF, ""}}},
		{"d12", []Token{{tokenDice, "d"}, {tokenNumber, "12"}, {tokenEOF, ""}}},
		{"d20", []Token{{tokenDice, "d"}, {tokenNumber, "20"}, {tokenEOF, ""}}},
		{"d100", []Token{{tokenDice, "d"}, {tokenNumber, "100"}, {tokenEOF, ""}}},
		{"d200", []Token{{tokenDice, "d"}, {tokenNumber, "200"}, {tokenEOF, ""}}},
		{"d1000", []Token{{tokenDice, "d"}, {tokenNumber, "1000"}, {tokenEOF, ""}}},
		// More complex expressions
		{"3d3", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "3"}, {tokenEOF, ""}}},
		{"3d6", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenEOF, ""}}},
		{"1d2", []Token{{tokenNumber, "1"}, {tokenDice, "d"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		//{"2d2d1", []Token{Token{tokenNumber, "2"}, Token{tokenDice, "d"}, Token{tokenNumber, "2"}, Token{tokenModifier, "d",}, Token{tokenNumber, "1"},  Token{tokenEOF, ""}}},
		{"3d6k2", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "k"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"3d6kl2", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "kl"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"4d8r2", []Token{{tokenNumber, "4"}, {tokenDice, "d"}, {tokenNumber, "8"}, {tokenModifier, "r"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"5d6s4", []Token{{tokenNumber, "5"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "s"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"6d6e", []Token{{tokenNumber, "6"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenEOF, ""}}},
		{"6d6e4", []Token{{tokenNumber, "6"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"7d6es8", []Token{{tokenNumber, "7"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "es"}, {tokenNumber, "8"}, {tokenEOF, ""}}},
		{"8d6o", []Token{{tokenNumber, "8"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "o"}, {tokenEOF, ""}}},
		{"10d10o", []Token{{tokenNumber, "10"}, {tokenDice, "d"}, {tokenNumber, "10"}, {tokenModifier, "o"}, {tokenEOF, ""}}},
		// More complex expressions (omiting the number of dices -> 1 dice)
		{"d6o", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "o"}, {tokenEOF, ""}}},
		{"d6e", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenEOF, ""}}},
		{"d6e4", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"d6es4", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "es"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"d100es96", []Token{{tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "es"}, {tokenNumber, "96"}, {tokenEOF, ""}}},
		{"d100k1", []Token{{tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "k"}, {tokenNumber, "1"}, {tokenEOF, ""}}},
		{"100d100k90", []Token{{tokenNumber, "100"}, {tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "k"}, {tokenNumber, "90"}, {tokenEOF, ""}}},
		{"100d100e96", []Token{{tokenNumber, "100"}, {tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "e"}, {tokenNumber, "96"}, {tokenEOF, ""}}},
		// Expressions with 0
		{"0", []Token{{tokenNumber, "0"}, {tokenEOF, ""}}},
		{"d0", []Token{{tokenDice, "d"}, {tokenNumber, "0"}, {tokenEOF, ""}}},
		{"0d3", []Token{{tokenNumber, "0"}, {tokenDice, "d"}, {tokenNumber, "3"}, {tokenEOF, ""}}},
		{"3d0", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "0"}, {tokenEOF, ""}}},
		{"3d6k0", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "k"}, {tokenNumber, "0"}, {tokenEOF, ""}}},

		// Some errors:
		{" 10000", []Token{{tokenError, "unexpected token 49, expected either 'd' or digit"}}},
		{"1000 ", []Token{{tokenNumber, "1000"}, {tokenError, "unexpected token after number"}}},
		{"10 000", []Token{{tokenNumber, "10"}, {tokenError, "unexpected token after number"}}},
		{"01000", []Token{{tokenError, "a number that starts with zero can't be followed by another digit, got '1'"}}},
		{"d6a", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenError, "unexpected token after number"}}},
		{"5d6v4", []Token{{tokenNumber, "5"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenError, "unexpected token after number"}}},
		{"5d6k4d", []Token{{tokenNumber, "5"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "k"}, {tokenNumber, "4"}, {tokenDice, "d"}, {tokenEOF, ""}}},
		// TODO: more test with spaces and invalid dice expressions
		/*
			// More complex expressions
			//{"3d4d5+2", []string{"3", "4", "d5+2"}, 3, 4},
			//{"2d6d1", []string{"2", "6", "d1"}, 2, 6},   // rolls two six-sided dice, drops the lowest roll, and sums the total
		*/
	}
	var resultTokens = []Token{}
	for i, lts := range lexerTestStrings {
		_, c := lex(lts.s)
		for tok := range c {
			resultTokens = append(resultTokens, tok)
		}

		if !assertEqualTokenSlices(lts.out, resultTokens) {
			t.Error("Expected value: ", lts.out, " obtaned: ", resultTokens)
			fmt.Printf("Lexer Test %d KO: (%q).\nExpected value: %v\nobtained value: %v\n", i, lts.s, lts.out, resultTokens)
		} else {
			fmt.Printf("Lexer Test %d OK: %q -> %s\n", i, lts.s, resultTokens)
		}
		resultTokens = []Token{}
	}
}

// TestFuzzLexer test the lexer with strings that have been found to crash the library by `go-fuzz`
func TestFuzzLexer(t *testing.T) {
	failures := 0
	defer func() {
		if r := recover(); r != nil {
			t.Error("Recovered! ", r)
			failures++
		}
	}()
	var lexerTestStrings = []struct {
		s   string
		out []Token
	}{
		// Valid lexical expressions might not be sintactically correct, but then the parser should detect the error
		{"0e0k4k", []Token{{tokenNumber, "0"}, {tokenModifier, "e"}, {tokenNumber, "0"}, {tokenModifier, "k"}, {tokenNumber, "4"}, {tokenModifier, "k"}, {tokenEOF, ""}}},
		{"6ed6d6ed6e", []Token{{tokenNumber, "6"}, {tokenModifier, "e"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenEOF, ""}}},
		{"0e4k", []Token{{tokenNumber, "0"}, {tokenModifier, "e"}, {tokenNumber, "4"}, {tokenModifier, "k"}, {tokenEOF, ""}}},
		// Expresions with errors detected by the lexer
		{"3ss", []Token{{tokenNumber, "3"}, {tokenModifier, "s"}, {tokenError, "received non digit (115) on numberState"}}},
		{"1kk", []Token{{tokenNumber, "1"}, {tokenModifier, "k"}, {tokenError, "received non digit (107) on numberState"}}},
		{"0e0e00", []Token{{tokenNumber, "0"}, {tokenModifier, "e"}, {tokenNumber, "0"}, {tokenModifier, "e"}, {tokenError, "a number that starts with zero can't be followed by another digit, got '0'"}}},
		{"6s0st", []Token{{tokenNumber, "6"}, {tokenModifier, "s"}, {tokenNumber, "0"}, {tokenModifier, "s"}, {tokenError, "received non digit (116) on numberState"}}},
		{"0e4ë7", []Token{{tokenNumber, "0"}, {tokenModifier, "e"}, {tokenNumber, "4"}, {tokenModifier, "̈̈e"}}},
		{"0e0e\x1ce0", []Token{{tokenNumber, "0"}, {tokenModifier, "e"}, {tokenNumber, "0"}, {tokenModifier, "e"}, {tokenError, "unexpecetd token \u001C, expected either 'd' or digit]"}}},
		{"1k4e20ke", []Token{Token{tokenNumber, "1"}, Token{tokenModifier, "k"}, Token{tokenNumber, "4"}, Token{tokenModifier, "e"}, Token{tokenNumber, "20"}, Token{tokenModifier, "k"}, Token{tokenError, "received non digit (101) on numberState"}}},
		{"4r4r:r4r4r", []Token{Token{tokenNumber, "4"}, Token{tokenModifier, "r"}, Token{tokenNumber, "4"}, Token{tokenModifier, "r"}, {tokenError, "received non digit (58) on numberState"}}},
		/*
			{"1kd𨯯\xd0\xfd", []Token{{tokenEOF, ""}}},
			{"0o0sJo08e", []Token{{tokenEOF, ""}}},
			{"9o99o9e", []Token{{tokenEOF, ""}}},
			{"\u200a 9k9k<k", []Token{{tokenEOF, ""}}},
			{"0d0d7", []Token{{tokenEOF, ""}}},
			{"2o0o2o", []Token{{tokenEOF, ""}}},
			{"9e9sSe9k9", []Token{{tokenEOF, ""}}},
			{"0o0sMo0", []Token{{tokenEOF, ""}}},
			{"874s0o0o", []Token{{tokenEOF, ""}}},
			{"d9e9d502d", []Token{{tokenEOF, ""}}},
			{"d9ee9d", []Token{{tokenEOF, ""}}},
			{"d9e9d9eJd9", []Token{{tokenEOF, ""}}},
			{"d9d9\xf6\xef", []Token{{tokenEOF, ""}}},
			{"d9e\xff\xff\x00\x00\x00@9", []Token{{tokenEOF, ""}}},
			{"d9d9e\xef", []Token{{tokenEOF, ""}}},
			{"0d94d", []Token{{tokenEOF, ""}}},
			{"9e9k\x01", []Token{{tokenEOF, ""}}},
			{"9d9d9e9e9", []Token{{tokenEOF, ""}}},
			{"9e9o9e9e", []Token{{tokenEOF, ""}}},
			{"9e9k9e9kZ", []Token{{tokenEOF, ""}}},
			{"9e9e\x01\x009e9e", []Token{{tokenEOF, ""}}},
			{"9o9oo", []Token{{tokenEOF, ""}}},
			{"0o2s048{0", []Token{{tokenEOF, ""}}},
			{"7r4o4r4r4r", []Token{{tokenEOF, ""}}},
			{"9k9k\x01k9k", []Token{{tokenEOF, ""}}},
			{"d9e9e9d9", []Token{{tokenEOF, ""}}},
			{"d9e9e9d9dd", []Token{{tokenEOF, ""}}},
			{"d9e9d9o9d9", []Token{{tokenEOF, ""}}},
			{"699e9d", []Token{{tokenEOF, ""}}},
			{"9e99e𑶩", []Token{{tokenEOF, ""}}},
			{"9e9d     \x00", []Token{{tokenEOF, ""}}},
			{"3es4d\x804es", []Token{{tokenEOF, ""}}},
			{"4e0e\x05)", []Token{{tokenEOF, ""}}},
			{"9e9e\xf0\x91", []Token{{tokenEOF, ""}}},
			{"5e5e߀\xdf\x00", []Token{{tokenEOF, ""}}},
			{"d99d9", []Token{{tokenEOF, ""}}},
			{"9o0s0o0o0", []Token{{tokenEOF, ""}}},
			{"8e1k\xff", []Token{{tokenEOF, ""}}},
			{"9o0oo", []Token{{tokenEOF, ""}}},
			{"19e1d9e9dd", []Token{{tokenEOF, ""}}},
			{"8e8e\xca\xca\xef", []Token{{tokenEOF, ""}}},
			{"8k95e߀", []Token{{tokenEOF, ""}}},
			{"54r4e߀", []Token{{tokenEOF, ""}}},
			{"0o90o90s", []Token{{tokenEOF, ""}}},
			{"9k9kF", []Token{{tokenEOF, ""}}},
			{"9k9o9k", []Token{{tokenEOF, ""}}},
			{"0s9o9s50", []Token{{tokenEOF, ""}}},
			{"9o9o99s", []Token{{tokenEOF, ""}}},
			{"d187d𑶖", []Token{{tokenEOF, ""}}},
			{"d9d9eedd", []Token{{tokenEOF, ""}}},
					{"d4e8d0d4k0", []Token{{tokenEOF, ""}}},
					{"0e4ë7", []Token{{tokenEOF, ""}}},
					{"3e0s\x15e0s0", []Token{{tokenEOF, ""}}},
					{"d4d4e0d4k0", []Token{{tokenEOF, ""}}},
					{"0e4e\x80\xaf", []Token{{tokenEOF, ""}}},
					{"192e0o4e", []Token{{tokenEOF, ""}}},
					{"444k4k4k4k", []Token{{tokenEOF, ""}}},
					{"6ed6e6e6ed", []Token{{tokenEOF, ""}}},
					{"0e4e)e4e", []Token{{tokenEOF, ""}}},
					{"0o40o4o", []Token{{tokenEOF, ""}}},
					{"0e0ee4", []Token{{tokenEOF, ""}}},
					{"4o4o0d@x", []Token{{tokenEOF, ""}}},
					{"3e0s\u007f", []Token{{tokenEOF, ""}}},
					{"0e0e4e0e,@", []Token{{tokenEOF, ""}}},
					{"0e4k\x17", []Token{{tokenEOF, ""}}},
					{"3es\x00\x00\x00\x80es", []Token{{tokenEOF, ""}}},
					{"0o4e0o4o\v\xdc", []Token{{tokenEOF, ""}}},
					{"d4e0e4k\rd4", []Token{{tokenEOF, ""}}},
					{"3e0s3e0s-", []Token{{tokenEOF, ""}}},
					{"1k4e\r\nk4e2", []Token{{tokenEOF, ""}}},
					{"0e4e \x00 ", []Token{{tokenEOF, ""}}},
					{"d440dk", []Token{{tokenEOF, ""}}},
					{"0e4d", []Token{{tokenEOF, ""}}},
					{"6r", []Token{{tokenEOF, ""}}},
					{"0k4el2", []Token{{tokenEOF, ""}}},
					{"0o4e<o4e", []Token{{tokenEOF, ""}}},
					{"5d5d", []Token{{tokenEOF, ""}}},
					{"0e0e00e0", []Token{{tokenEOF, ""}}},
					{"0o4e0o4k", []Token{{tokenEOF, ""}}},
					{"0e8o7\xe3\x1a\x1bm", []Token{{tokenEOF, ""}}},
					{"41s", []Token{{tokenEOF, ""}}},
					{"0e40ee", []Token{{tokenEOF, ""}}},
					{"0o4o4e", []Token{{tokenEOF, ""}}},
					{"4k4k4k4k\x1a", []Token{{tokenEOF, ""}}},
					{"d4e0d4k\x01d4", []Token{{tokenEOF, ""}}},
					{"237ss4r4ss", []Token{{tokenEOF, ""}}},
					{"0e4e0e4d", []Token{{tokenEOF, ""}}},
					{"4e0o44e", []Token{{tokenEOF, ""}}},
					{"3e4er2", []Token{{tokenEOF, ""}}},
					{"3s0e\x060", []Token{{tokenEOF, ""}}},
					{"0e4kg2", []Token{{tokenEOF, ""}}},
					{"0e0eNe0", []Token{{tokenEOF, ""}}},
					{"4k4k4k4d4k", []Token{{tokenEOF, ""}}},
					{"d40d\x00\x000d4", []Token{{tokenEOF, ""}}},
					{"4k4kMk4k4k", []Token{{tokenEOF, ""}}},
					{"d4e0d4k044", []Token{{tokenEOF, ""}}},
					{"0d4kh]0d4", []Token{{tokenEOF, ""}}},
					{"0e4ee", []Token{{tokenEOF, ""}}},
					{"300ss", []Token{{tokenEOF, ""}}},
					{"3e8s ", []Token{{tokenEOF, ""}}},
					{"0e4o0o4o", []Token{{tokenEOF, ""}}},
					{"d0d00", []Token{{tokenEOF, ""}}},
					{"0o4e\xff\x00\x00\x00", []Token{{tokenEOF, ""}}},
					{"4k4k4kkP2", []Token{{tokenEOF, ""}}},
					{"0e0e\x15", []Token{{tokenEOF, ""}}},
					{"0e4k\xe4", []Token{{tokenEOF, ""}}},
					{"1k1k", []Token{{tokenEOF, ""}}},
					{"0e0e4e0ee", []Token{{tokenEOF, ""}}},
					{"1k\x00\x80", []Token{{tokenEOF, ""}}},
					{"0o4e(o4o", []Token{{tokenEOF, ""}}},
					{"0o4e\u007f\xff\xff\xff", []Token{{tokenEOF, ""}}},
					{"3s4rPs4r2", []Token{{tokenEOF, ""}}},
					{"0d4k\fd40\f", []Token{{tokenEOF, ""}}},
					{"0e4k\x822", []Token{{tokenEOF, ""}}},
					{"3s4rMs4v2", []Token{{tokenEOF, ""}}},
					{"0o4e\x17o4t", []Token{{tokenEOF, ""}}},
					{"4k0d4e\U0001a02f", []Token{{tokenEOF, ""}}},
					{"3s4d2", []Token{{tokenEOF, ""}}},
					{"3e0s", []Token{{tokenEOF, ""}}},
					{"d0d0", []Token{{tokenEOF, ""}}},
					{"3s4r\x00\x00\u007f\xff2", []Token{{tokenEOF, ""}}},
					{"0d4d0e4k2", []Token{{tokenEOF, ""}}},
					{"3s4r3s4r=", []Token{{tokenEOF, ""}}},
					{"3s4r4r3s", []Token{{tokenEOF, ""}}},
					{"d0d", []Token{{tokenEOF, ""}}},
					{"1k4e\x13f\x13fm2", []Token{{tokenEOF, ""}}},
					{"6e0o4e¼", []Token{{tokenEOF, ""}}},
					{"954e0o4e", []Token{{tokenEOF, ""}}},
					{"0e0e4e0e\x1ae", []Token{{tokenEOF, ""}}},
					{"1o0o4e0o4o", []Token{{tokenEOF, ""}}},
					{"0d4kdk00dd", []Token{{tokenEOF, ""}}},
					{"0e4e\xef(\xbdo", []Token{{tokenEOF, ""}}},
					{"0e4k", []Token{{tokenEOF, ""}}},
					{"6s0st", []Token{{tokenEOF, ""}}},
					{"3e0s3e0s$", []Token{{tokenEOF, ""}}},
					{"0d4k`d4", []Token{{tokenEOF, ""}}},
					{"0d4k04k2", []Token{{tokenEOF, ""}}},
					{"1kk\U000bdfff", []Token{{tokenEOF, ""}}},
					{"3s4rr3s4r", []Token{{tokenEOF, ""}}},
					{"4k4k4k4eL", []Token{{tokenEOF, ""}}},
					{"0o440oee", []Token{{tokenEOF, ""}}},
					{"3s4r\x12s4rB", []Token{{tokenEOF, ""}}},
					{"4k40d4kSd4", []Token{{tokenEOF, ""}}},
					{"d4e0e4k\xc3d4", []Token{{tokenEOF, ""}}},
					{"4k4k\x00\x804k4k", []Token{{tokenEOF, ""}}},
					{"0e2kl\xd7", []Token{{tokenEOF, ""}}},
					{"3s3s<r4r3s", []Token{{tokenEOF, ""}}},
					{"3ese", []Token{{tokenEOF, ""}}},
					{"1k\x00\x02\xbf\xbf", []Token{{tokenEOF, ""}}},
					{"0e0e4e0e@e", []Token{{tokenEOF, ""}}},
					{"0o10o4o", []Token{{tokenEOF, ""}}},
					{"0d4k\xfcd4", []Token{{tokenEOF, ""}}},
					{"0e4e00", []Token{{tokenEOF, ""}}},
					{"3e0d\x00t\x80\x000", []Token{{tokenEOF, ""}}},
					{"0e4e\xe0\"\x80", []Token{{tokenEOF, ""}}},
					{"d4e\x05\xff\xff\x050d4", []Token{{tokenEOF, ""}}},
					{"3es3s00", []Token{{tokenEOF, ""}}},
					{"0e4d\x000e4e2", []Token{{tokenEOF, ""}}},
					{"1k\r", []Token{{tokenEOF, ""}}},
					{"0r", []Token{{tokenEOF, ""}}},
					{"d7d0", []Token{{tokenEOF, ""}}},
					{"3e4e3e4r", []Token{{tokenEOF, ""}}},
					{"0o7e024o", []Token{{tokenEOF, ""}}},
					{"0e0e\xb0e0", []Token{{tokenEOF, ""}}},
					{"3s4r\x80\x004r2", []Token{{tokenEOF, ""}}},
					{"0o4o0o4e", []Token{{tokenEOF, ""}}},
					{"0e4o0e4o", []Token{{tokenEOF, ""}}},
					{"0e0o4k", []Token{{tokenEOF, ""}}},
					{"d4k00d4W4", []Token{{tokenEOF, ""}}},
					{"4k4k\u007f\xff4k4k", []Token{{tokenEOF, ""}}},
					{"3es3esIes", []Token{{tokenEOF, ""}}},
					{"3s\x00\x023s4r2", []Token{{tokenEOF, ""}}},
					{"4k4k4kd", []Token{{tokenEOF, ""}}},
					{"0k0k", []Token{{tokenEOF, ""}}},
					{"3ese3s3es", []Token{{tokenEOF, ""}}},
					{"4k4k424kk", []Token{{tokenEOF, ""}}},
					{"0o4e@o4o", []Token{{tokenEOF, ""}}},
					{"6ss", []Token{{tokenEOF, ""}}},
					{"0d4o40d4", []Token{{tokenEOF, ""}}},
					{"3es3esUes", []Token{{tokenEOF, ""}}},
					{"4k4k4k4k", []Token{{tokenEOF, ""}}},
					{"d4o40d4", []Token{{tokenEOF, ""}}},
					{"0e4k+", []Token{{tokenEOF, ""}}},
					{"d0d4k0ｿ", []Token{{tokenEOF, ""}}},
					{"3e0s3e0s\x0e", []Token{{tokenEOF, ""}}},
					{"1k\x00�a\xfd", []Token{{tokenEOF, ""}}},
					{"0e0ee0", []Token{{tokenEOF, ""}}},
					{"40e4ee", []Token{{tokenEOF, ""}}},
					{"3es3ee6es", []Token{{tokenEOF, ""}}},
					{"4k4kWk2", []Token{{tokenEOF, ""}}},
					{"0e4k\xcf\f\f\f", []Token{{tokenEOF, ""}}},
					{"3s4r\xd4sr42", []Token{{tokenEOF, ""}}},
					{"0e4kU", []Token{{tokenEOF, ""}}},
					{"3e4e+", []Token{{tokenEOF, ""}}},
					{"0o40o4e", []Token{{tokenEOF, ""}}},
					{"0e0eaL0e0", []Token{{tokenEOF, ""}}},
					{"0k", []Token{{tokenEOF, ""}}},
					{"0klk42", []Token{{tokenEOF, ""}}},
					{"3es33sees", []Token{{tokenEOF, ""}}},
					{"1kd", []Token{{tokenEOF, ""}}},
					{"4kk44\u007fC", []Token{{tokenEOF, ""}}},
					{"0o4d", []Token{{tokenEOF, ""}}},
					{"6s", []Token{{tokenEOF, ""}}},
					{"4k4k4kk4k2", []Token{{tokenEOF, ""}}},
					{"3s4r3s4r\"", []Token{{tokenEOF, ""}}},
					{"4kk", []Token{{tokenEOF, ""}}},
					{"0e0o4e", []Token{{tokenEOF, ""}}},
					{"3ese3ess\x1e", []Token{{tokenEOF, ""}}},
					{"6ed6ed6e6e", []Token{{tokenEOF, ""}}},
					{"0kd", []Token{{tokenEOF, ""}}},
					{"3es3e\xaf3es", []Token{{tokenEOF, ""}}},
					{"3sr42", []Token{{tokenEOF, ""}}},
					{"0d4kDe4k2", []Token{{tokenEOF, ""}}},
					{"0d4k", []Token{{tokenEOF, ""}}},
					{"0es3ese", []Token{{tokenEOF, ""}}},
					{"0e0e@\x01e", []Token{{tokenEOF, ""}}},
					{"3es\x00ds3es", []Token{{tokenEOF, ""}}},
					{"0e4k024k2", []Token{{tokenEOF, ""}}},
					{"d4e\x0fe4k0d4", []Token{{tokenEOF, ""}}},
					{"4kk2", []Token{{tokenEOF, ""}}},
					{"0e0o4e0o7o", []Token{{tokenEOF, ""}}},
					{"606s", []Token{{tokenEOF, ""}}},
					{"1k4e\u007f0k4e2", []Token{{tokenEOF, ""}}},
					{"4k4o4o4", []Token{{tokenEOF, ""}}},
					{"d224d4", []Token{{tokenEOF, ""}}},
					{"4kkk4k444k", []Token{{tokenEOF, ""}}},
					{"6ed6e6e6de", []Token{{tokenEOF, ""}}},
					{"1kk\xff\x80\xbf", []Token{{tokenEOF, ""}}},
					{"d4k d4", []Token{{tokenEOF, ""}}},
					{"3s4r3sr42", []Token{{tokenEOF, ""}}},
					{"0o4e\x10o4e", []Token{{tokenEOF, ""}}},
					{"4k", []Token{{tokenEOF, ""}}},
					{"0e0e@\x01", []Token{{tokenEOF, ""}}},
					{"d7d7", []Token{{tokenEOF, ""}}},
					{"1ke", []Token{{tokenEOF, ""}}},
					{"0d4k,0d\x18", []Token{{tokenEOF, ""}}},
					{"3es3e3ess\x1e", []Token{{tokenEOF, ""}}},
					{"6ed6d6ee", []Token{{tokenEOF, ""}}},
					{"0e440ekkI", []Token{{tokenEOF, ""}}},
					{"0o40o40", []Token{{tokenEOF, ""}}},
					{"3s3s4rsr3s", []Token{{tokenEOF, ""}}},
					{"66o0o0", []Token{{tokenEOF, ""}}},
					{"80ke2", []Token{{tokenEOF, ""}}},
					{"1k\x00\xfd", []Token{{tokenEOF, ""}}},
					{"0k\x00\x10\xff\x80\x80\xaf4", []Token{{tokenEOF, ""}}},
					{"1k\x00\x00\x00\x80e4e2", []Token{{tokenEOF, ""}}},
					{"0o4o0e4o", []Token{{tokenEOF, ""}}},
					{"4k4kErrork", []Token{{tokenEOF, ""}}},
					{"d4k0k0d4d4", []Token{{tokenEOF, ""}}},
					{"d0o0", []Token{{tokenEOF, ""}}},
					{"0s", []Token{{tokenEOF, ""}}},
					{"d6o0", []Token{{tokenEOF, ""}}},
					{"1d11d1", []Token{{tokenEOF, ""}}},
					{"0e0o0o4e", []Token{{tokenEOF, ""}}},
					{"0o4ed\x00\x00\x00", []Token{{tokenEOF, ""}}},
					{"0e0e?e0", []Token{{tokenEOF, ""}}},
					{"1k", []Token{{tokenEOF, ""}}},
					{"0d0k4e4ke", []Token{{tokenEOF, ""}}},
					{"3ess3e000", []Token{{tokenEOF, ""}}},
					{"6ed6e6ed6d", []Token{{tokenEOF, ""}}},
					{"0kd4k0e4k2", []Token{{tokenEOF, ""}}},
					{"3es3e\x01\x00\f", []Token{{tokenEOF, ""}}},
					{"0e4eM0e4e2", []Token{{tokenEOF, ""}}},
					{"3ess\xff\xff", []Token{{tokenEOF, ""}}},
					{"11k", []Token{{tokenEOF, ""}}},
					{"d4e0e4kFd4", []Token{{tokenEOF, ""}}},
					{"0d4kQk2", []Token{{tokenEOF, ""}}},
					{"0d4k\u007f\xff\xff\xff0d", []Token{{tokenEOF, ""}}},
					{"0o4e/o4o", []Token{{tokenEOF, ""}}},
					{"4s0est", []Token{{tokenEOF, ""}}},
					{"3e4r߱\xc2\x15\xcc2", []Token{{tokenEOF, ""}}},
					{"3eses3es$", []Token{{tokenEOF, ""}}},
					{"0o40o44e", []Token{{tokenEOF, ""}}},
					{"6ed1d6e", []Token{{tokenEOF, ""}}},
					{"894e0o4M\x8d", []Token{{tokenEOF, ""}}},
					{"d66o0", []Token{{tokenEOF, ""}}},
					{"1kk\u007f", []Token{{tokenEOF, ""}}},
					{"3s0eK#\x9bcs0", []Token{{tokenEOF, ""}}},
					{"d0d0\x10", []Token{{tokenEOF, ""}}},
					{"0e0e04e2e0", []Token{{tokenEOF, ""}}},
					{"3s0de[0", []Token{{tokenEOF, ""}}},
					{"0d40d4k0d4", []Token{{tokenEOF, ""}}},
					{"1k4d,0e4e2", []Token{{tokenEOF, ""}}},
					{"7sr442", []Token{{tokenEOF, ""}}},
					{"0e4e04e2", []Token{{tokenEOF, ""}}},
					{"d0d70", []Token{{tokenEOF, ""}}},
					{"3s3s4rrr3s", []Token{{tokenEOF, ""}}},
					{"0d4o0e4k\x12", []Token{{tokenEOF, ""}}},
					{"d903d4S0d4", []Token{{tokenEOF, ""}}},
					{"0e4k@e4k2", []Token{{tokenEOF, ""}}},
					{"0o4e04o", []Token{{tokenEOF, ""}}},
					{"0e4klkl2", []Token{{tokenEOF, ""}}},
					{"3s0e\x910", []Token{{tokenEOF, ""}}},
					{"d0d0k0d0d*", []Token{{tokenEOF, ""}}},
					{"1k\x00\x00\x00\x00", []Token{{tokenEOF, ""}}},
					{"0e0ee", []Token{{tokenEOF, ""}}},
					{"1kdM\xbd\xbf\xef\x00\x80", []Token{{tokenEOF, ""}}},
					{"1k4d10e4e2", []Token{{tokenEOF, ""}}},
					{"0e4ee0e4e ", []Token{{tokenEOF, ""}}},
					{"0e0o0", []Token{{tokenEOF, ""}}},
					{"4e0eB4e", []Token{{tokenEOF, ""}}},
					{"d0d0u_d0", []Token{{tokenEOF, ""}}},
					{"3e0s s0", []Token{{tokenEOF, ""}}},
					{"36s", []Token{{tokenEOF, ""}}},
					{"0o0o4e", []Token{{tokenEOF, ""}}},
					{"d4e04k\x00d4", []Token{{tokenEOF, ""}}},
					{"4e0o4e0o4e", []Token{{tokenEOF, ""}}},
					{"0d4k004k2", []Token{{tokenEOF, ""}}},
					{"1k4e\xfa\x00\x00\xfae2", []Token{{tokenEOF, ""}}},
					{"4o4o0@x", []Token{{tokenEOF, ""}}},
					{"6ed6ede66e", []Token{{tokenEOF, ""}}},
					{"3es3e\x803es", []Token{{tokenEOF, ""}}},
					{"0e0o4o", []Token{{tokenEOF, ""}}},
					{"3ese3es", []Token{{tokenEOF, ""}}},
					{"476e0o4e", []Token{{tokenEOF, ""}}},
					{"0e4o0o\x10\x00", []Token{{tokenEOF, ""}}},
					{"3e4r\xff", []Token{{tokenEOF, ""}}},
					{"d1d1", []Token{{tokenEOF, ""}}},
					{"3s4r", []Token{{tokenEOF, ""}}},
					{"0o40o4", []Token{{tokenEOF, ""}}},
					{"1k\x00\x01\x00\x00", []Token{{tokenEOF, ""}}},
					{"0ed6ey\xeae\xbf\xbf", []Token{{tokenEOF, ""}}},
					{"6k\x00\x04\u202f", []Token{{tokenEOF, ""}}},
					{"3es3e\u007f\x00", []Token{{tokenEOF, ""}}},
					{"3s0eq0", []Token{{tokenEOF, ""}}},
					{"3s0e\x03\xe8", []Token{{tokenEOF, ""}}},
					{"0e0e\x010e", []Token{{tokenEOF, ""}}},
					{"d4e0d4d0k4", []Token{{tokenEOF, ""}}},
					{"0e4ee4e2", []Token{{tokenEOF, ""}}},
					{"6e0o40", []Token{{tokenEOF, ""}}},
					{"3e43e4rr2", []Token{{tokenEOF, ""}}},
					{"0e0d\x00\x00\x00\x014e", []Token{{tokenEOF, ""}}},
					{"d1d", []Token{{tokenEOF, ""}}},
					{"0o4o4o", []Token{{tokenEOF, ""}}},
					{"237e0o4o", []Token{{tokenEOF, ""}}},
					{"0d4k4k0d", []Token{{tokenEOF, ""}}},
					{"6ed6e*ed@\x00", []Token{{tokenEOF, ""}}},
					{"3e0s\xdde0s0", []Token{{tokenEOF, ""}}},
					{"0e0e\x92", []Token{{tokenEOF, ""}}},
					{"3s43s", []Token{{tokenEOF, ""}}},
					{"3d0se0", []Token{{tokenEOF, ""}}},
					{"4k4k4k4kHk", []Token{{tokenEOF, ""}}},
					{"3s\x00\x00\u007f\xff4r2", []Token{{tokenEOF, ""}}},
					{"0e4kl", []Token{{tokenEOF, ""}}},
					{"0e4k\x1b", []Token{{tokenEOF, ""}}},
					{"0e0e@e0", []Token{{tokenEOF, ""}}},
					{"0e4ee\x80ee", []Token{{tokenEOF, ""}}},
					{"3s0es\r", []Token{{tokenEOF, ""}}},
					{"11kk\xe1", []Token{{tokenEOF, ""}}},
					{"3e4e3e4e#", []Token{{tokenEOF, ""}}},
					{"0d4k!0e4k2", []Token{{tokenEOF, ""}}},
					{"1k0k", []Token{{tokenEOF, ""}}},
					{"0e42k", []Token{{tokenEOF, ""}}},
					{"3s4r3s4d2", []Token{{tokenEOF, ""}}},
					{"3s4r\xff2", []Token{{tokenEOF, ""}}},
					{"5k\x00\x00\x00\x10\xaf", []Token{{tokenEOF, ""}}},
					{"3e0s0e0s\x0e", []Token{{tokenEOF, ""}}},
					{"4e0o4e0o4o", []Token{{tokenEOF, ""}}},
					{"0s0s", []Token{{tokenEOF, ""}}},
					{"1k\x00 \x80\xaf\u202f\xe2", []Token{{tokenEOF, ""}}},
					{"5d0d", []Token{{tokenEOF, ""}}},
					{"0e4k]=", []Token{{tokenEOF, ""}}},
					{"3s0d\x000", []Token{{tokenEOF, ""}}},
					{"374e0o4o", []Token{{tokenEOF, ""}}},
					{"0e0efe0e4e", []Token{{tokenEOF, ""}}},
					{"d4d0e4k0d4", []Token{{tokenEOF, ""}}},
					{"d40d4", []Token{{tokenEOF, ""}}},
					{"4e40e+ee", []Token{{tokenEOF, ""}}},
					{"0d4k0e4kd", []Token{{tokenEOF, ""}}},
					{"0o4e0o4o4o", []Token{{tokenEOF, ""}}},
					{"3ss4}w", []Token{{tokenEOF, ""}}},
			    {"0d4k\x00\x104k0d", []Token{{tokenEOF, ""}}},
		*/
	}
	var resultTokens = []Token{}
	for i, lts := range lexerTestStrings {
		_, c := lex(lts.s)
		for tok := range c {
			resultTokens = append(resultTokens, tok)
		}

		if !assertEqualTokenSlices(lts.out, resultTokens) {
			t.Error("Expected value: ", lts.out, " obtaned: ", resultTokens)
			t.Logf("Lexer Test %d KO (%q).\nExpected value: %#v\nobtained value: %#v\n", i, lts.s, lts.out, resultTokens)
			failures++
		} else {
			t.Logf("Lexer Test %d OK: %q -> %v\n", i, lts.s, resultTokens)
		}
		resultTokens = []Token{}
	}
	t.Logf("\nFailed %d out of %d tested expressions", failures, len(lexerTestStrings))
}
