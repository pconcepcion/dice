// Package dice provides tools to develop rpg games package rpg
package dice

import (
	"fmt"
	"testing"
)

// Helper Functions

// equalTokenSlices compares two token slices and returns true if both are have the same content
func assertEqualTokenSlices(a, b []Token) bool {
	if len(a) != len(b) {
		return false
	}
	// TODO: extracth this to a compare token arrays function
	for i, tok := range a {
		if tok != b[i] {
			return false
		}
	}
	return true
}

// Test that the lexer sends the propper tokens
func TestLexer(t *testing.T) {
	var lexerTestStrings = []struct {
		s   string
		out []Token
	}{
		// Constants
		{"1", []Token{{tokenNumber, "1"}, {tokenEOF, ""}}},
		{"10", []Token{{tokenNumber, "10"}, {tokenEOF, ""}}},
		{"100", []Token{{tokenNumber, "100"}, {tokenEOF, ""}}},
		{"1000", []Token{{tokenNumber, "1000"}, {tokenEOF, ""}}},
		{"10000", []Token{{tokenNumber, "10000"}, {tokenEOF, ""}}},
		{"4321", []Token{{tokenNumber, "4321"}, {tokenEOF, ""}}},
		// Basic dices
		{"d2", []Token{{tokenDice, "d"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"d3", []Token{{tokenDice, "d"}, {tokenNumber, "3"}, {tokenEOF, ""}}},
		{"d4", []Token{{tokenDice, "d"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"d6", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenEOF, ""}}},
		{"d8", []Token{{tokenDice, "d"}, {tokenNumber, "8"}, {tokenEOF, ""}}},
		{"d10", []Token{{tokenDice, "d"}, {tokenNumber, "10"}, {tokenEOF, ""}}},
		{"d12", []Token{{tokenDice, "d"}, {tokenNumber, "12"}, {tokenEOF, ""}}},
		{"d20", []Token{{tokenDice, "d"}, {tokenNumber, "20"}, {tokenEOF, ""}}},
		{"d100", []Token{{tokenDice, "d"}, {tokenNumber, "100"}, {tokenEOF, ""}}},
		{"d200", []Token{{tokenDice, "d"}, {tokenNumber, "200"}, {tokenEOF, ""}}},
		{"d1000", []Token{{tokenDice, "d"}, {tokenNumber, "1000"}, {tokenEOF, ""}}},
		// More complex expressions
		{"3d3", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "3"}, {tokenEOF, ""}}},
		{"3d6", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenEOF, ""}}},
		{"1d2", []Token{{tokenNumber, "1"}, {tokenDice, "d"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		//{"2d2d1", []Token{Token{tokenNumber, "2"}, Token{tokenDice, "d"}, Token{tokenNumber, "2"}, Token{tokenModifier, "d",}, Token{tokenNumber, "1"},  Token{tokenEOF, ""}}},
		{"3d6k2", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "k"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"3d6kl2", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "kl"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"4d8r2", []Token{{tokenNumber, "4"}, {tokenDice, "d"}, {tokenNumber, "8"}, {tokenModifier, "r"}, {tokenNumber, "2"}, {tokenEOF, ""}}},
		{"5d6s4", []Token{{tokenNumber, "5"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "s"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"6d6e", []Token{{tokenNumber, "6"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenEOF, ""}}},
		{"6d6e4", []Token{{tokenNumber, "6"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"7d6es8", []Token{{tokenNumber, "7"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "es"}, {tokenNumber, "8"}, {tokenEOF, ""}}},
		{"8d6o", []Token{{tokenNumber, "8"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "o"}, {tokenEOF, ""}}},
		{"10d10o", []Token{{tokenNumber, "10"}, {tokenDice, "d"}, {tokenNumber, "10"}, {tokenModifier, "o"}, {tokenEOF, ""}}},
		// More complex expressions (omiting the number of dices -> 1 dice)
		{"d6o", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "o"}, {tokenEOF, ""}}},
		{"d6e", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenEOF, ""}}},
		{"d6e4", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "e"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"d6es4", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "es"}, {tokenNumber, "4"}, {tokenEOF, ""}}},
		{"d100es96", []Token{{tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "es"}, {tokenNumber, "96"}, {tokenEOF, ""}}},
		{"d100k1", []Token{{tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "k"}, {tokenNumber, "1"}, {tokenEOF, ""}}},
		{"100d100k90", []Token{{tokenNumber, "100"}, {tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "k"}, {tokenNumber, "90"}, {tokenEOF, ""}}},
		{"100d100e96", []Token{{tokenNumber, "100"}, {tokenDice, "d"}, {tokenNumber, "100"}, {tokenModifier, "e"}, {tokenNumber, "96"}, {tokenEOF, ""}}},
		// Expressions with 0
		{"0", []Token{{tokenNumber, "0"}, {tokenEOF, ""}}},
		{"d0", []Token{{tokenDice, "d"}, {tokenNumber, "0"}, {tokenEOF, ""}}},
		{"0d3", []Token{{tokenNumber, "0"}, {tokenDice, "d"}, {tokenNumber, "3"}, {tokenEOF, ""}}},
		{"3d0", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "0"}, {tokenEOF, ""}}},
		{"3d6k0", []Token{{tokenNumber, "3"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "k"}, {tokenNumber, "0"}, {tokenEOF, ""}}},

		// Some errors:
		{" 10000", []Token{{tokenError, "unexpected token 49, expected either 'd' or number"}}},
		{"1000 ", []Token{{tokenNumber, "1000"}, {tokenError, "unexpected token after num"}}},
		{"10 000", []Token{{tokenNumber, "10"}, {tokenError, "unexpected token after num"}}},
		{"01000", []Token{{tokenError, "a number that starts with zero can't be followed by another digit, got '1'"}}},
		{"d6a", []Token{{tokenDice, "d"}, {tokenNumber, "6"}, {tokenError, "unexpected token after num"}}},
		{"5d6v4", []Token{{tokenNumber, "5"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenError, "unexpected token after num"}}},
		{"5d6k4d", []Token{{tokenNumber, "5"}, {tokenDice, "d"}, {tokenNumber, "6"}, {tokenModifier, "k"}, {tokenNumber, "4"}, {tokenDice, "d"}, {tokenError, "expected number after dice token, got '\\x00'"}}},
		// TODO: more test with spaces and invalid dice expressions
		/*
			// More complex expressions
			//{"3d4d5+2", []string{"3", "4", "d5+2"}, 3, 4},
			//{"2d6d1", []string{"2", "6", "d1"}, 2, 6},   // rolls two six-sided dice, drops the lowest roll, and sums the total
		*/
	}
	var resultTokens = []Token{}
	for i, lts := range lexerTestStrings {
		_, c := lex(lts.s)
		for tok := range c {
			resultTokens = append(resultTokens, tok)
		}

		if !assertEqualTokenSlices(lts.out, resultTokens) {
			t.Error("Expected value: ", lts.out, " obtaned: ", resultTokens)
			fmt.Printf("Lexer Test %d KO. Expected value: %v obtained  %v\n", i, lts.out, resultTokens)
		} else {
			fmt.Printf("Lexer Test %d OK: %s\n", i, resultTokens)
		}
		resultTokens = []Token{}
	}
}

// Test for the isWhitespace function
func TestIsWhitespace(t *testing.T) {
	var testStrings = []struct {
		s rune
		b bool
	}{
		{' ', true},
		{'\t', true},
		{'\n', true},
		{'a', false},
		{'ä', false},
		{'0', false},
		{'9', false},
		{'本', false},
		{'\000', false},
		{'\007', false},
		{'\377', false},
		{'\x07', false},
		{'\xff', false},
		{'\u12e4', false},
		{'\U00101234', false},
	}
	var testResult bool

	for _, lts := range testStrings {
		testResult = isWhitespace(lts.s)
		if testResult != lts.b {
			t.Error("Expected value: ", lts.b, " obtaned: ", testResult)
		}
	}
}

// TestFuzzStrings test strings that have been found to crash the library by `go-fuzz`
func TestFuzzStrings(t *testing.T) {
	var testStrings = []struct {
		s string
		b bool
	}{
		{"0e0k4k", true},
		{"0e0e\x1ce0", true},
		{"1kd𨯯\xd0\xfd", true},
		{"d4e8d0d4k0", true},
		{"0e4ë7", true},
		{"3e0s\x15e0s0", true},
		{"d4d4e0d4k0", true},
		{"0e4e\x80\xaf", true},
		{"192e0o4e", true},
		{"444k4k4k4k", true},
		{"3ss", true},
		{"6ed6d6ed6e", true},
		{"6ed6e6e6ed", true},
		{"0e4e)e4e", true},
		{"0o40o4o", true},
		{"0e0ee4", true},
		{"4o4o0d@x", true},
		{"3e0s\u007f", true},
		{"0e0e4e0e,@", true},
		{"0e0e00", true},
		{"1kk", true},
		{"0e4k\x17", true},
		{"3es\x00\x00\x00\x80es", true},
		{"0o4e0o4o\v\xdc", true},
		{"d4e0e4k\rd4", true},
		{"3e0s3e0s-", true},
		{"1k4e\r\nk4e2", true},
		{"0e4e \x00 ", true},
		{"d440dk", true},
		{"0e4d", true},
		{"6r", true},
		{"0k4el2", true},
		{"0o4e<o4e", true},
		{"5d5d", true},
		{"0e0e00e0", true},
		{"0o4e0o4k", true},
		{"0e8o7\xe3\x1a\x1bm", true},
		{"41s", true},
		{"0e40ee", true},
		{"0o4o4e", true},
		{"4k4k4k4k\x1a", true},
		{"d4e0d4k\x01d4", true},
		{"237ss4r4ss", true},
		{"0e4e0e4d", true},
		{"4e0o44e", true},
		{"3e4er2", true},
		{"3s0e\x060", true},
		{"0e4kg2", true},
		{"0e0eNe0", true},
		{"4k4k4k4d4k", true},
		{"d40d\x00\x000d4", true},
		{"4k4kMk4k4k", true},
		{"d4e0d4k044", true},
		{"0d4kh]0d4", true},
		{"0e4ee", true},
		{"300ss", true},
		{"3e8s ", true},
		{"0e4o0o4o", true},
		{"d0d00", true},
		{"0o4e\xff\x00\x00\x00", true},
		{"4k4k4kkP2", true},
		{"0e0e\x15", true},
		{"0e4k\xe4", true},
		{"1k1k", true},
		{"0e0e4e0ee", true},
		{"1k\x00\x80", true},
		{"0o4e(o4o", true},
		{"0o4e\u007f\xff\xff\xff", true},
		{"3s4rPs4r2", true},
		{"0d4k\fd40\f", true},
		{"0e4k\x822", true},
		{"3s4rMs4v2", true},
		{"0o4e\x17o4t", true},
		{"4k0d4e\U0001a02f", true},
		{"3s4d2", true},
		{"3e0s", true},
		{"d0d0", true},
		{"3s4r\x00\x00\u007f\xff2", true},
		{"0d4d0e4k2", true},
		{"3s4r3s4r=", true},
		{"3s4r4r3s", true},
		{"d0d", true},
		{"1k4e\x13f\x13fm2", true},
		{"6e0o4e¼", true},
		{"954e0o4e", true},
		{"0e0e4e0e\x1ae", true},
		{"1o0o4e0o4o", true},
		{"0d4kdk00dd", true},
		{"0e4e\xef(\xbdo", true},
		{"0e4k", true},
		{"6s0st", true},
		{"3e0s3e0s$", true},
		{"0d4k`d4", true},
		{"0d4k04k2", true},
		{"1kk\U000bdfff", true},
		{"3s4rr3s4r", true},
		{"4k4k4k4eL", true},
		{"0o440oee", true},
		{"3s4r\x12s4rB", true},
		{"4k40d4kSd4", true},
		{"d4e0e4k\xc3d4", true},
		{"4k4k\x00\x804k4k", true},
		{"0e2kl\xd7", true},
		{"3s3s<r4r3s", true},
		{"3ese", true},
		{"1k\x00\x02\xbf\xbf", true},
		{"0e0e4e0e@e", true},
		{"0o10o4o", true},
		{"0d4k\xfcd4", true},
		{"0e4e00", true},
		{"3e0d\x00t\x80\x000", true},
		{"0e4e\xe0\"\x80", true},
		{"d4e\x05\xff\xff\x050d4", true},
		{"3es3s00", true},
		{"0e4d\x000e4e2", true},
		{"1k\r", true},
		{"0r", true},
		{"d7d0", true},
		{"3e4e3e4r", true},
		{"0o7e024o", true},
		{"0e0e\xb0e0", true},
		{"3s4r\x80\x004r2", true},
		{"0o4o0o4e", true},
		{"0e4o0e4o", true},
		{"0e0o4k", true},
		{"d4k00d4W4", true},
		{"4k4k\u007f\xff4k4k", true},
		{"3es3esIes", true},
		{"3s\x00\x023s4r2", true},
		{"4k4k4kd", true},
		{"0k0k", true},
		{"3ese3s3es", true},
		{"4k4k424kk", true},
		{"0o4e@o4o", true},
		{"6ss", true},
		{"0d4o40d4", true},
		{"3es3esUes", true},
		{"4k4k4k4k", true},
		{"d4o40d4", true},
		{"0e4k+", true},
		{"d0d4k0ｿ", true},
		{"3e0s3e0s\x0e", true},
		{"1k\x00�a\xfd", true},
		{"0e0ee0", true},
		{"40e4ee", true},
		{"3es3ee6es", true},
		{"4k4kWk2", true},
		{"0e4k\xcf\f\f\f", true},
		{"3s4r\xd4sr42", true},
		{"0e4kU", true},
		{"3e4e+", true},
		{"0o40o4e", true},
		{"0e0eaL0e0", true},
		{"0k", true},
		{"0klk42", true},
		{"3es33sees", true},
		{"1kd", true},
		{"4kk44\u007fC", true},
		{"0o4d", true},
		{"6s", true},
		{"4k4k4kk4k2", true},
		{"3s4r3s4r\"", true},
		{"4kk", true},
		{"0e0o4e", true},
		{"3ese3ess\x1e", true},
		{"6ed6ed6e6e", true},
		{"0kd", true},
		{"3es3e\xaf3es", true},
		{"3sr42", true},
		{"0d4kDe4k2", true},
		{"0d4k", true},
		{"0es3ese", true},
		{"0e0e@\x01e", true},
		{"3es\x00ds3es", true},
		{"0e4k024k2", true},
		{"d4e\x0fe4k0d4", true},
		{"4kk2", true},
		{"0e0o4e0o7o", true},
		{"606s", true},
		{"1k4e\u007f0k4e2", true},
		{"4k4o4o4", true},
		{"d224d4", true},
		{"4kkk4k444k", true},
		{"6ed6e6e6de", true},
		{"1kk\xff\x80\xbf", true},
		{"d4k d4", true},
		{"3s4r3sr42", true},
		{"0o4e\x10o4e", true},
		{"4k", true},
		{"0e0e@\x01", true},
		{"d7d7", true},
		{"1ke", true},
		{"0d4k,0d\x18", true},
		{"3es3e3ess\x1e", true},
		{"6ed6d6ee", true},
		{"0e440ekkI", true},
		{"0o40o40", true},
		{"3s3s4rsr3s", true},
		{"66o0o0", true},
		{"80ke2", true},
		{"1k\x00\xfd", true},
		{"0k\x00\x10\xff\x80\x80\xaf4", true},
		{"1k\x00\x00\x00\x80e4e2", true},
		{"0o4o0e4o", true},
		{"4k4kErrork", true},
		{"d4k0k0d4d4", true},
		{"d0o0", true},
		{"0s", true},
		{"d6o0", true},
		{"1d11d1", true},
		{"0e0o0o4e", true},
		{"0o4ed\x00\x00\x00", true},
		{"0e0e?e0", true},
		{"1k", true},
		{"0d0k4e4ke", true},
		{"3ess3e000", true},
		{"6ed6e6ed6d", true},
		{"0kd4k0e4k2", true},
		{"3es3e\x01\x00\f", true},
		{"0e4eM0e4e2", true},
		{"3ess\xff\xff", true},
		{"11k", true},
		{"d4e0e4kFd4", true},
		{"0d4kQk2", true},
		{"0d4k\u007f\xff\xff\xff0d", true},
		{"0o4e/o4o", true},
		{"4s0est", true},
		{"3e4r߱\xc2\x15\xcc2", true},
		{"3eses3es$", true},
		{"0o40o44e", true},
		{"6ed1d6e", true},
		{"894e0o4M\x8d", true},
		{"d66o0", true},
		{"1kk\u007f", true},
		{"3s0eK#\x9bcs0", true},
		{"d0d0\x10", true},
		{"0e0e04e2e0", true},
		{"3s0de[0", true},
		{"0d40d4k0d4", true},
		{"1k4d,0e4e2", true},
		{"7sr442", true},
		{"0e4e04e2", true},
		{"d0d70", true},
		{"3s3s4rrr3s", true},
		{"0d4o0e4k\x12", true},
		{"d903d4S0d4", true},
		{"0e4k@e4k2", true},
		{"0o4e04o", true},
		{"0e4klkl2", true},
		{"3s0e\x910", true},
		{"d0d0k0d0d*", true},
		{"1k\x00\x00\x00\x00", true},
		{"0e0ee", true},
		{"1kdM\xbd\xbf\xef\x00\x80", true},
		{"1k4d10e4e2", true},
		{"0e4ee0e4e ", true},
		{"0e0o0", true},
		{"4e0eB4e", true},
		{"d0d0u_d0", true},
		{"3e0s s0", true},
		{"36s", true},
		{"0o0o4e", true},
		{"d4e04k\x00d4", true},
		{"4e0o4e0o4e", true},
		{"0d4k004k2", true},
		{"1k4e\xfa\x00\x00\xfae2", true},
		{"4o4o0@x", true},
		{"6ed6ede66e", true},
		{"3es3e\x803es", true},
		{"0e0o4o", true},
		{"3ese3es", true},
		{"476e0o4e", true},
		{"0e4o0o\x10\x00", true},
		{"3e4r\xff", true},
		{"d1d1", true},
		{"3s4r", true},
		{"0o40o4", true},
		{"1k\x00\x01\x00\x00", true},
		{"0ed6ey\xeae\xbf\xbf", true},
		{"6k\x00\x04\u202f", true},
		{"3es3e\u007f\x00", true},
		{"3s0eq0", true},
		{"3s0e\x03\xe8", true},
		{"0e0e\x010e", true},
		{"d4e0d4d0k4", true},
		{"0e4ee4e2", true},
		{"6e0o40", true},
		{"3e43e4rr2", true},
		{"0e0d\x00\x00\x00\x014e", true},
		{"d1d", true},
		{"0o4o4o", true},
		{"237e0o4o", true},
		{"0d4k4k0d", true},
		{"6ed6e*ed@\x00", true},
		{"3e0s\xdde0s0", true},
		{"0e0e\x92", true},
		{"3s43s", true},
		{"3d0se0", true},
		{"4k4k4k4kHk", true},
		{"3s\x00\x00\u007f\xff4r2", true},
		{"0e4kl", true},
		{"0e4k\x1b", true},
		{"0e0e@e0", true},
		{"0e4ee\x80ee", true},
		{"3s0es\r", true},
		{"11kk\xe1", true},
		{"3e4e3e4e#", true},
		{"0d4k!0e4k2", true},
		{"1k0k", true},
		{"0e42k", true},
		{"3s4r3s4d2", true},
		{"3s4r\xff2", true},
		{"5k\x00\x00\x00\x10\xaf", true},
		{"3e0s0e0s\x0e", true},
		{"4e0o4e0o4o", true},
		{"0s0s", true},
		{"1k\x00 \x80\xaf\u202f\xe2", true},
		{"5d0d", true},
		{"0e4k]=", true},
		{"3s0d\x000", true},
		{"374e0o4o", true},
		{"0e0efe0e4e", true},
		{"d4d0e4k0d4", true},
		{"d40d4", true},
		{"4e40e+ee", true},
		{"0d4k0e4kd", true},
		{"0o4e0o4o4o", true},
		{"3ss4}w", true},
		{"0d4k\x00\x104k0d", true},
		{"1k4e20ke", true},
	}
	var testResult bool
	var de SimpleExpression
	var parseError error
	for i, lts := range testStrings {
		de.expressionText = lts.s
		t.Log("Testing ", lts.s)
		parseError = de.parse()
		testResult = (parseError != nil)
		if testResult != lts.b {
			t.Error("Error on string (", i, ") Expected value: ", lts.b, " obtaned: ", testResult)
		}
	}
}
